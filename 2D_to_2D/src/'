//2D to 2D 
#include "Matcher.h"
#include <iostream>
#include <unistd.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>

using namespace cv;
using namespace std;

int main( int argc, char** argv )
{
//Declare a few variables
	int i,j=0;
//Read image sequence
	
	if ( argc != 2 && argc != 3 )
	{
		cout << "Call function with ./filename <image dir> <path to the first image: path/img_%02d.jpg> optional: <number of images>" << endl;
		cout << argv[1] << endl;
		return -1;
	}
	
	//Init imagesequence
	string path = argv[1];
	if ( argc == 3)	{i = atoi(argv[2]);}
	else{i = -1;}
	VideoCapture sequence(path);
	if ( !sequence.isOpened() )
	{
		cerr << "Failed to open Image Sequence!" << endl;
		return -1;
	}
	
	Mat img; Mat prev_img; Mat match_img; Mat prev_descriptors; Mat curr_descriptors;
	vector<KeyPoint> curr_keypoints, prev_keypoints;
	vector<DMatch> good_matches;
	
	Matcher match;
	namedWindow("Img, q/esc to quit", CV_WINDOW_NORMAL);
	namedWindow("Prev", CV_WINDOW_NORMAL);
	namedWindow("Matches", CV_WINDOW_NORMAL);
	while( 1 )
	{	
		
		sequence >> img;
		
		if ( img.empty() || j == i )
		{
			cout << "Sequence finished" << endl;
			break;
		}
				
		if ( j == 0 )
		{
			match.fastMatcher( img, prev_keypoints, prev_descriptors );
			j++;
			prev_img = img;
			imshow("Img, q/esc to quit",img);
			continue;
		}
		
		imshow("Img, q/esc to quit", img);
		imshow("Prev", prev_img);
		//waitKey(1000);
		/*char key = (char)waitKey(500);
		
		if( key == 'q' || key == 27 )
		{
			break;
		}*/
		
		
		match.fastMatcher(	img, 
					prev_keypoints, prev_descriptors, 
					curr_keypoints, curr_descriptors,
					good_matches);
		
		drawMatches( 		prev_img, prev_keypoints,
					img, curr_keypoints,
					good_matches,
					match_img);
		
		imshow("Matches", match_img);
		waitKey(3000);
		j++;
		prev_img = &img;
		cout << "Image: " << j << endl;
		//usleep( 100*1000 );
	}
}
